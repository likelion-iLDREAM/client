import styled from "styled-components";
import Header from "../../../components/common/Header";
import Button from "../../../components/common/Button";
import { useEffect, useMemo, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";

export default function ResumeEdit() {
  const navigate = useNavigate();
  const location = useLocation();

  // Ïñ¥Îñ§ Ìï≠Î™©ÏùÑ ÏàòÏ†ïÌï†ÏßÄ ÏãùÎ≥Ñ (Resume.jsxÏóêÏÑú stateÎ°ú ÎÑòÍπÄ)
  const editId = location?.state?.id ?? null;

  // ÏÑ∏ÏÖòÏóêÏÑú Ï†ÑÏ≤¥ Î¶¨Ïä§Ìä∏ Î°úÎìú
  const [list, setList] = useState(() => {
    try {
      const raw = sessionStorage.getItem("resume.list");
      return raw ? JSON.parse(raw) : [];
    } catch {
      return [];
    }
  });

  // Ìé∏Ïßë ÎåÄÏÉÅ Ï∞æÍ∏∞ (id ÏóÜÏúºÎ©¥ ÎßàÏßÄÎßâ Ìï≠Î™© fallback)
  const target = useMemo(() => {
    if (!Array.isArray(list) || list.length === 0) return null;
    if (editId == null) return list[list.length - 1];
    return list.find((it) => it.id === editId) ?? list[list.length - 1];
  }, [list, editId]);

  // ====== UI ÏÉÅÌÉú ======
  const [company, setCompany] = useState("");
  const [duty, setDuty] = useState("");
  const [selectedTag, setSelectedTag] = useState(""); // 1Í∞ú ÏÑ†ÌÉù
  const [showOther, setShowOther] = useState(false);

  // Í∑ºÎ¨¥ÏßÄÏó≠
  const [sido] = useState("ÏÑúÏö∏ÌäπÎ≥ÑÏãú");
  const [gu, setGu] = useState("");

  // Í∑ºÎ¨¥Í∏∞Í∞Ñ
  const [startDate, setStartDate] = useState(""); // yyyy-mm-dd
  const [endDate, setEndDate] = useState(""); // yyyy-mm-dd

  // Ï¥àÍ∏∞Ìôî: targetÏóêÏÑú ÏÉÅÌÉúÎ°ú Ï£ºÏûÖ
  useEffect(() => {
    if (!target) {
      alert("ÏàòÏ†ïÌï† Ïù¥Î†•Ïù¥ ÏóÜÏäµÎãàÎã§.");
      navigate("/homeseeker/resume");
      return;
    }
    setCompany(target.company || "");
    setDuty(target.duty || "");
    setSelectedTag(target.jobTag || "");

    // Ï£ºÏÜåÏóêÏÑú Íµ¨ Ï∂îÏ∂ú (AddÏóêÏÑú addrÏùÄ `${sido} ${gu}`)
    const m = (target.addr || "").match(/([Í∞Ä-Ìû£]+Íµ¨)/);
    setGu(m ? m[1] : "");

    // ÎÇ†Ïßú Î≥µÏõê
    // 1ÏàúÏúÑ: ÏÉàÎ°ú Ï†ÄÏû•Îêú startIso/endIsoÍ∞Ä ÏûàÏúºÎ©¥ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
    if (target.startIso && target.endIso) {
      setStartDate(target.startIso);
      setEndDate(target.endIso);
    } else {
      // 2ÏàúÏúÑ: "YYYY.MM ~ YYYY.MM ..." ÌòïÌÉúÏóêÏÑú ÎåÄÎûµ Î≥µÏõê(ÏùºÏûêÎäî 01Î°ú)
      // Ïòà: "2020.01 ~ 2021.06 (1ÎÖÑ 5Í∞úÏõî)"
      const dm = (target.date || "").match(
        /\s*(\d{4})\.(\d{2})\s*~\s*(\d{4})\.(\d{2})/
      );
      if (dm) {
        setStartDate(`${dm[1]}-${dm[2]}-01`);
        setEndDate(`${dm[3]}-${dm[4]}-01`);
      } else {
        setStartDate("");
        setEndDate("");
      }
    }
  }, [target, navigate]);

  // ÏßÅÎ¨¥ Î∂ÑÏïº
  const mainTags = [
    { id: "farm", label: "üå± ÎÜçÏÇ¨¬∑ÏõêÏòà¬∑Ïñ¥ÏóÖ" },
    { id: "drive", label: "üöö Ïö¥Ï†Ñ¬∑Î∞∞Îã¨" },
    { id: "craft", label: "ü™µ Î™©Í≥µ¬∑Í≥µÏòà¬∑Ï†úÏ°∞" },
  ];
  const otherTags = [
    "üé®Î¨∏Ìôî¬∑Ïó∞Íµ¨¬∑Í∏∞Ïà†",
    "ü•¨ÏãùÌíà¬∑Ïò∑¬∑ÌôòÍ≤Ω Í∞ÄÍ≥µ",
    "üìÑÏÇ¨Î¨¥¬∑Í∏àÏúµ",
    "‚ù§Ô∏èÎèåÎ¥Ñ",
    "üõíÌåêÎß§",
    "üç≤ÏùåÏãù¬∑ÏÑúÎπÑÏä§",
    "üîåÏ†ÑÍ∏∞¬∑Ï†ÑÏûê ÏàòÎ¶¨",
    "‚öôÔ∏èÍ∏∞Í≥Ñ¬∑Í∏àÏÜç Ï†úÏûë¬∑ÏàòÎ¶¨",
  ];

  const seoulGus = [
    "Ï¢ÖÎ°úÍµ¨",
    "Ï§ëÍµ¨",
    "Ïö©ÏÇ∞Íµ¨",
    "ÏÑ±ÎèôÍµ¨",
    "Í¥ëÏßÑÍµ¨",
    "ÎèôÎåÄÎ¨∏Íµ¨",
    "Ï§ëÎûëÍµ¨",
    "ÏÑ±Î∂ÅÍµ¨",
    "Í∞ïÎ∂ÅÍµ¨",
    "ÎèÑÎ¥âÍµ¨",
    "ÎÖ∏ÏõêÍµ¨",
    "ÏùÄÌèâÍµ¨",
    "ÏÑúÎåÄÎ¨∏Íµ¨",
    "ÎßàÌè¨Íµ¨",
    "ÏñëÏ≤úÍµ¨",
    "Í∞ïÏÑúÍµ¨",
    "Íµ¨Î°úÍµ¨",
    "Í∏àÏ≤úÍµ¨",
    "ÏòÅÎì±Ìè¨Íµ¨",
    "ÎèôÏûëÍµ¨",
    "Í¥ÄÏïÖÍµ¨",
    "ÏÑúÏ¥àÍµ¨",
    "Í∞ïÎÇ®Íµ¨",
    "ÏÜ°ÌååÍµ¨",
    "Í∞ïÎèôÍµ¨",
  ];

  // ÎÇ†Ïßú Ïú†Ìã∏
  const addMonths = (m) => {
    if (!startDate) return;
    const d = new Date(startDate);
    d.setMonth(d.getMonth() + m);
    const yyyy = d.getFullYear();
    const mm = String(d.getMonth() + 1).padStart(2, "0");
    const dd = String(d.getDate()).padStart(2, "0");
    setEndDate(`${yyyy}-${mm}-${dd}`);
  };
  const fmtYYYYMM = (iso) => {
    if (!iso) return "";
    const [y, m] = iso.split("-");
    return `${y}.${m}`;
  };
  const diffMonths = (s, e) => {
    const sd = new Date(s);
    const ed = new Date(e);
    if (isNaN(sd) || isNaN(ed) || ed < sd) return 0;
    return (
      (ed.getFullYear() - sd.getFullYear()) * 12 +
      (ed.getMonth() - sd.getMonth())
    );
  };
  const humanizePeriod = (months) => {
    if (!months || months <= 0) return "";
    if (months >= 12) {
      const y = Math.floor(months / 12);
      const m = months % 12;
      return ` (${y}ÎÖÑ${m ? ` ${m}Í∞úÏõî` : ""})`;
    }
    return ` (${months}Í∞úÏõî)`;
  };

  const handleSave = () => {
    if (
      !target ||
      !company.trim() ||
      !duty.trim() ||
      !selectedTag ||
      !gu ||
      !startDate ||
      !endDate
    ) {
      alert(
        "ÏóÖÏ≤¥Î™Ö, ÏßÅÎ¨¥, ÏßÅÎ¨¥ Î∂ÑÏïº 1Í∞ú, Í∑ºÎ¨¥ÏßÄÏó≠, Í∑ºÎ¨¥Í∏∞Í∞ÑÏùÑ Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
      );
      return;
    }

    const months = diffMonths(startDate, endDate);
    const period = `${fmtYYYYMM(startDate)} ~ ${fmtYYYYMM(
      endDate
    )}${humanizePeriod(months)}`;

    const updated = {
      ...target,
      company: company.trim(),
      duty: duty.trim(),
      jobTag: selectedTag,
      addr: `${sido} ${gu}`,
      date: period,
      startIso: startDate, // ÏÉà Íµ¨Ï°∞ (Ìé∏Ïßë Ïû¨ÏßÑÏûÖ Ïãú Î≥µÏõêÏö©)
      endIso: endDate, // ÏÉà Íµ¨Ï°∞ (Ìé∏Ïßë Ïû¨ÏßÑÏûÖ Ïãú Î≥µÏõêÏö©)
      // titleÏùÄ ÏöîÍµ¨ÏÇ¨Ìï≠ÎåÄÎ°ú Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ("[ÏßÄÏó≠] Íµ¨Ïù∏Í≥µÍ≥†Î™Ö")
    };

    const next = list.map((it) => (it.id === updated.id ? updated : it));
    sessionStorage.setItem("resume.list", JSON.stringify(next));
    navigate("/homeseeker/resume");
  };

  return (
    <AddContainer>
      <Header showBack text={"Ïù¥Î†• ÏàòÏ†ïÌïòÍ∏∞"} />

      <Info>
        <Input>
          <p>ÏóÖÏ≤¥Î™Ö</p>
          <input
            value={company}
            onChange={(e) => setCompany(e.target.value)}
            placeholder="Ïù¥Í≥≥Ïóê ÏóÖÏ≤¥Î™ÖÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî."
          />
        </Input>

        <Input>
          <p>ÏßÅÎ¨¥</p>
          <input
            value={duty}
            onChange={(e) => setDuty(e.target.value)}
            placeholder="Ïù¥Í≥≥Ïóê ÌïòÏÖ®Îçò ÏóÖÎ¨¥Î•º Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî."
          />
        </Input>

        <Tag>
          <p>ÏßÅÎ¨¥ Î∂ÑÏïº (1Í∞ú ÏÑ†ÌÉù)</p>
          <TagList>
            {mainTags.map((t) => (
              <TagPill
                key={t.id}
                data-selected={selectedTag === t.label}
                onClick={() => setSelectedTag(t.label)}
              >
                {t.label}
              </TagPill>
            ))}
            <TagPill
              data-variant="outline"
              onClick={() => setShowOther((s) => !s)}
            >
              Îã§Î•∏ Î∂ÑÏïº ‚ñæ
            </TagPill>
          </TagList>
          {showOther && (
            <OtherWrap>
              {otherTags.map((label) => (
                <TagPill
                  key={label}
                  data-selected={selectedTag === label}
                  onClick={() => setSelectedTag(label)}
                >
                  {label}
                </TagPill>
              ))}
            </OtherWrap>
          )}
        </Tag>

        <Location>
          <p>Í∑ºÎ¨¥ÏßÄÏó≠</p>
          <Row gap={8}>
            <Select disabled value={sido}>
              <option>{sido}</option>
            </Select>
            <Select value={gu} onChange={(e) => setGu(e.target.value)}>
              <option value="" disabled>
                Ïãú/Íµ∞/Íµ¨
              </option>
              {seoulGus.map((g) => (
                <option key={g} value={g}>
                  {g}
                </option>
              ))}
            </Select>
          </Row>
        </Location>

        <Time>
          <p>Í∑ºÎ¨¥Í∏∞Í∞Ñ</p>
          <Row gap={8} style={{ alignItems: "center" }}>
            <DateInput
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
            />
            <Tilde>~</Tilde>
            <DateInput
              type="date"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
            />
          </Row>
          <Row gap={8} style={{ marginTop: 8 }}>
            <SmallChip onClick={() => addMonths(6)}>6Í∞úÏõî</SmallChip>
            <SmallChip onClick={() => addMonths(12)}>1ÎÖÑ</SmallChip>
          </Row>
        </Time>
      </Info>

      <Tap>
        <Button type={"White"} text={"ÏàòÏ†ïÌïòÍ∏∞"} onClick={handleSave} />
      </Tap>
    </AddContainer>
  );
}

const AddContainer = styled.div``;

const Info = styled.div`
  display: flex;
  flex-direction: column;
  gap: 15px;
  padding: 12px 30px 20px 30px;
`;

const Input = styled.div`
  display: flex;
  flex-direction: column;
  gap: 13px;
  p {
    font-size: 20px;
    font-weight: 700;
    margin: 0;
  }
  input {
    width: 320px;
    display: flex;
    padding: 10px;
    justify-content: center;
    align-items: center;
    border-radius: 7px;
    border: 1px solid var(--Foundation-Black-black-6, #bfbfbf);
    background: var(--Foundation-surface-White, #fff);
    gap: 10px;
    align-self: stretch;
    color: var(--Foundation-Black-black-7, #8c8c8c);
    font-family: "Pretendard Variable";
    font-size: 20px;
    font-weight: 400;
    line-height: normal;
  }
`;

const Tag = styled.div`
  p {
    font-size: 20px;
    font-weight: 700;
    margin: 0 0 8px 0;
  }
`;

const TagList = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
`;

const TagPill = styled.button`
  all: unset;
  cursor: pointer;
  padding: 8px 12px;
  border-radius: 8px;
  font-size: 14px;
  border: 1px solid #bfbfbf;
  background: #ffffff;

  &[data-selected="true"] {
    background: var(--Foundation-Green-Light, #eaf7f0);
    border-color: #7cc9a5;
    font-weight: 600;
  }

  &[data-variant="outline"] {
    background: #ffffff;
  }
`;

const OtherWrap = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-top: 8px;
`;

const Location = styled.div`
  p {
    font-size: 20px;
    font-weight: 700;
    margin: 0 0 8px 0;
  }
`;

const Row = styled.div`
  display: flex;
  gap: ${(p) => (p.gap ? `${p.gap}px` : "0")};
`;

const Select = styled.select`
  width: 155px;
  padding: 10px 12px;
  border-radius: 7px;
  border: 1px solid var(--Foundation-Black-black-6, #bfbfbf);
  background: var(--Foundation-surface-White, #fff);
  font-size: 16px;
  color: #000;

  &[disabled] {
    color: #8c8c8c;
    background: #f5f5f5;
  }
`;

const Time = styled.div`
  p {
    font-size: 20px;
    font-weight: 700;
    margin: 0 0 8px 0;
  }
`;

const DateInput = styled.input`
  width: 150px;
  padding: 10px 12px;
  border-radius: 7px;
  border: 1px solid var(--Foundation-Black-black-6, #bfbfbf);
  background: var(--Foundation-surface-White, #fff);
  font-size: 16px;
`;

const Tilde = styled.span`
  font-weight: 700;
  padding: 0 4px;
`;

const SmallChip = styled.button`
  all: unset;
  cursor: pointer;
  padding: 6px 10px;
  border-radius: 7px;
  border: 1px solid #bfbfbf;
  background: #ffffff;
  font-size: 14px;
`;

const Tap = styled.div`
  border-top: 1px solid #bbb;
  padding: 10px 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
`;
