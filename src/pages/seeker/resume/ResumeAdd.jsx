import styled from "styled-components";
import Header from "../../../components/common/Header";
import Button from "../../../components/common/Button";
import { useState } from "react";

export default function ResumeAdd() {
  // ÏûÖÎ†•Í∞í
  const [company, setCompany] = useState("");
  const [duty, setDuty] = useState("");

  // ÏßÅÎ¨¥ Î∂ÑÏïº
  const mainTags = [
    { id: "farm", label: "üå± ÎÜçÏÇ¨¬∑ÏõêÏòà¬∑Ïñ¥ÏóÖ" },
    { id: "drive", label: "üöö Ïö¥Ï†Ñ¬∑Î∞∞Îã¨" },
    { id: "craft", label: "ü™µ Î™©Í≥µ¬∑Í≥µÏòà¬∑Ï†úÏ°∞" },
  ];
  const otherTags = [
    "Î¨∏Ìôî¬∑Ïó∞Íµ¨¬∑Í∏∞Ïà†",
    "ÏãùÌíà¬∑Ïò∑¬∑ÌôòÍ≤Ω Í∞ÄÍ≥µ",
    "ÏÇ¨Î¨¥¬∑Í∏àÏúµ",
    "ÎèåÎ¥Ñ",
    "ÌåêÎß§",
    "ÏùåÏãù¬∑ÏÑúÎπÑÏä§",
    "Ï†ÑÍ∏∞¬∑Ï†ÑÏûê ÏàòÎ¶¨",
    "Í∏∞Í≥Ñ¬∑Í∏àÏÜç Ï†úÏûë¬∑ÏàòÎ¶¨",
  ];
  const [selectedTags, setSelectedTags] = useState([]);
  const [showOther, setShowOther] = useState(false);
  const toggleTag = (key) =>
    setSelectedTags((prev) =>
      prev.includes(key) ? prev.filter((t) => t !== key) : [...prev, key]
    );

  // Í∑ºÎ¨¥ÏßÄÏó≠
  const [sido] = useState("ÏÑúÏö∏ÌäπÎ≥ÑÏãú");
  const seoulGus = [
    "Ï¢ÖÎ°úÍµ¨",
    "Ï§ëÍµ¨",
    "Ïö©ÏÇ∞Íµ¨",
    "ÏÑ±ÎèôÍµ¨",
    "Í¥ëÏßÑÍµ¨",
    "ÎèôÎåÄÎ¨∏Íµ¨",
    "Ï§ëÎûëÍµ¨",
    "ÏÑ±Î∂ÅÍµ¨",
    "Í∞ïÎ∂ÅÍµ¨",
    "ÎèÑÎ¥âÍµ¨",
    "ÎÖ∏ÏõêÍµ¨",
    "ÏùÄÌèâÍµ¨",
    "ÏÑúÎåÄÎ¨∏Íµ¨",
    "ÎßàÌè¨Íµ¨",
    "ÏñëÏ≤úÍµ¨",
    "Í∞ïÏÑúÍµ¨",
    "Íµ¨Î°úÍµ¨",
    "Í∏àÏ≤úÍµ¨",
    "ÏòÅÎì±Ìè¨Íµ¨",
    "ÎèôÏûëÍµ¨",
    "Í¥ÄÏïÖÍµ¨",
    "ÏÑúÏ¥àÍµ¨",
    "Í∞ïÎÇ®Íµ¨",
    "ÏÜ°ÌååÍµ¨",
    "Í∞ïÎèôÍµ¨",
  ];
  const [gu, setGu] = useState("");

  // Í∑ºÎ¨¥Í∏∞Í∞Ñ
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const addMonths = (m) => {
    if (!startDate) return;
    const d = new Date(startDate);
    d.setMonth(d.getMonth() + m);
    const yyyy = d.getFullYear();
    const mm = String(d.getMonth() + 1).padStart(2, "0");
    const dd = String(d.getDate()).padStart(2, "0");
    setEndDate(`${yyyy}-${mm}-${dd}`);
  };

  return (
    <AddContainer>
      <Header showBack text={"Ïù¥Î†• ÏàòÏ†ïÌïòÍ∏∞"} />

      <Info>
        <Input>
          <p>ÏóÖÏ≤¥Î™Ö</p>
          <input
            value={company}
            onChange={(e) => setCompany(e.target.value)}
            placeholder="Ïù¥Í≥≥Ïóê ÏóÖÏ≤¥Î™ÖÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî."
          />
        </Input>

        <Input>
          <p>ÏßÅÎ¨¥</p>
          <input
            value={duty}
            onChange={(e) => setDuty(e.target.value)}
            placeholder="Ïù¥Í≥≥Ïóê ÌïòÏÖ®Îçò ÏóÖÎ¨¥Î•º Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî."
          />
        </Input>

        <Tag>
          <p>ÏßÅÎ¨¥ Î∂ÑÏïº</p>
          <TagList>
            {mainTags.map((t) => (
              <TagPill
                key={t.id}
                data-selected={selectedTags.includes(t.id)}
                onClick={() => toggleTag(t.id)}
              >
                {t.label}
              </TagPill>
            ))}
            <TagPill
              data-variant="outline"
              onClick={() => setShowOther((s) => !s)}
            >
              Îã§Î•∏ Î∂ÑÏïº ‚ñæ
            </TagPill>
          </TagList>
          {showOther && (
            <OtherWrap>
              {otherTags.map((label) => (
                <TagPill
                  key={label}
                  data-selected={selectedTags.includes(label)}
                  onClick={() => toggleTag(label)}
                >
                  {label}
                </TagPill>
              ))}
            </OtherWrap>
          )}
        </Tag>

        <Location>
          <p>Í∑ºÎ¨¥ÏßÄÏó≠</p>
          <Row gap={8}>
            <Select disabled value={sido}>
              <option>{sido}</option>
            </Select>
            <Select value={gu} onChange={(e) => setGu(e.target.value)}>
              <option value="" disabled>
                Ïãú/Íµ∞/Íµ¨
              </option>
              {seoulGus.map((g) => (
                <option key={g} value={g}>
                  {g}
                </option>
              ))}
            </Select>
          </Row>
        </Location>

        <Time>
          <p>Í∑ºÎ¨¥Í∏∞Í∞Ñ</p>
          <Row gap={8} style={{ alignItems: "center" }}>
            <DateInput
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
            />
            <Tilde>~</Tilde>
            <DateInput
              type="date"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
            />
          </Row>
          <Row gap={8} style={{ marginTop: 8 }}>
            <SmallChip onClick={() => addMonths(6)}>6Í∞úÏõî</SmallChip>
            <SmallChip onClick={() => addMonths(12)}>1ÎÖÑ</SmallChip>
          </Row>
        </Time>
      </Info>

      <Tap>
        <Button type={"White"} text={"Ï∂îÍ∞ÄÌïòÍ∏∞"} />
      </Tap>
    </AddContainer>
  );
}

const AddContainer = styled.div``;

const TopRow = styled.div`
  display: flex;
  justify-content: flex-end;
  padding: 8px 30px 0 30px;
`;

const VisibilityBadge = styled.button`
  all: unset;
  cursor: pointer;
  padding: 6px 12px;
  border-radius: 999px;
  font-size: 12px;
  font-weight: 700;
  border: 1px solid;

  &[data-state="public"] {
    color: #d92d20;
    background: #ffffff;
    border-color: #fecdd3;
  }
  &[data-state="private"] {
    color: #5f6368;
    background: #f1f3f4;
    border-color: #e0e3e7;
  }
`;

const Info = styled.div`
  display: flex;
  flex-direction: column;
  gap: 15px;
  padding: 12px 30px 20px 30px;
`;

const Input = styled.div`
  display: flex;
  flex-direction: column;
  gap: 13px;
  p {
    font-size: 20px;
    font-weight: 700;
    margin: 0;
  }
  input {
    width: 320px;
    display: flex;
    padding: 10px;
    justify-content: center;
    align-items: center;
    border-radius: 7px;
    border: 1px solid var(--Foundation-Black-black-6, #bfbfbf);
    background: var(--Foundation-surface-White, #fff);
    gap: 10px;
    align-self: stretch;
    color: var(--Foundation-Black-black-7, #8c8c8c);
    font-family: "Pretendard Variable";
    font-size: 20px;
    font-weight: 400;
    line-height: normal;
  }
`;

const Tag = styled.div`
  p {
    font-size: 20px;
    font-weight: 700;
    margin: 0 0 8px 0;
  }
`;

const TagList = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
`;

const TagPill = styled.button`
  all: unset;
  cursor: pointer;
  padding: 8px 12px;
  border-radius: 8px;
  font-size: 14px;
  border: 1px solid #bfbfbf;
  background: #ffffff;

  &[data-selected="true"] {
    background: var(--Foundation-Green-Light, #eaf7f0);
    border-color: #7cc9a5;
    font-weight: 600;
  }

  &[data-variant="outline"] {
    background: #ffffff;
  }
`;

const OtherWrap = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-top: 8px;
`;

const Location = styled.div`
  p {
    font-size: 20px;
    font-weight: 700;
    margin: 0 0 8px 0;
  }
`;

const Row = styled.div`
  display: flex;
  gap: ${(p) => (p.gap ? `${p.gap}px` : "0")};
`;

const Select = styled.select`
  width: 155px;
  padding: 10px 12px;
  border-radius: 7px;
  border: 1px solid var(--Foundation-Black-black-6, #bfbfbf);
  background: var(--Foundation-surface-White, #fff);
  font-size: 16px;
  color: #000;

  &[disabled] {
    color: #8c8c8c;
    background: #f5f5f5;
  }
`;

const Time = styled.div`
  p {
    font-size: 20px;
    font-weight: 700;
    margin: 0 0 8px 0;
  }
`;

const DateInput = styled.input`
  width: 150px;
  padding: 10px 12px;
  border-radius: 7px;
  border: 1px solid var(--Foundation-Black-black-6, #bfbfbf);
  background: var(--Foundation-surface-White, #fff);
  font-size: 16px;
`;

const Tilde = styled.span`
  font-weight: 700;
  padding: 0 4px;
`;

const SmallChip = styled.button`
  all: unset;
  cursor: pointer;
  padding: 6px 10px;
  border-radius: 7px;
  border: 1px solid #bfbfbf;
  background: #ffffff;
  font-size: 14px;
`;

const Text = styled.div`
  p {
    font-size: 20px;
    font-weight: 700;
    margin: 0 0 8px 0;
  }
`;

const TextArea = styled.textarea`
  width: 320px;
  padding: 10px 12px;
  border-radius: 7px;
  border: 1px solid var(--Foundation-Black-black-6, #bfbfbf);
  background: var(--Foundation-surface-White, #fff);
  font-size: 16px;
  color: #000;

  ::placeholder {
    color: var(--Foundation-Black-black-7, #8c8c8c);
  }
`;

const Tap = styled.div`
  border-top: 1px solid #bbb;
  padding: 10px 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
`;
